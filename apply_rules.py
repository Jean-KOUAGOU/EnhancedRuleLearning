import argparse
import time
map_model_to_folder = {'transe': 'TransAMIE', 'distmult': 'DistAMIE', 'rotate': 'RotAMIE'}

def execute(kgs, models, system):
    import os
    if system in ['amie', 'AMIE']:
        if models is not None:
            for model in models:
                folder = map_model_to_folder[model.lower()]
                path = f"data/{folder}/"
                print(f"Applying rules generated by our system, KGE model: {model}")
                for kg in kgs:
                    t0 = time.time()
                    print("Dataset: ", kg.upper())
                    config = f"{path}config-apply-{kg}.properties"
                    os.system(f'java -Xmx12G -cp systems/AnyBURL-RE.jar de.unima.ki.anyburl.Apply {config}')
                    t1 = time.time()
                    with open(f"{path}predictions_{kg}/runtime.txt", "w") as time_file:
                        time_file.write(str(t1-t0))

        else:
            path = f"data/AMIE/"
            print(f"\n### Applying AMIE rules generated on original KG(s) ###\n")
            for kg in kgs:
                t0 = time.time()
                print("Dataset: ", kg.upper())
                config = f"{path}config-apply-{kg}.properties"
                os.system(f'java -Xmx12G -cp systems/AnyBURL-RE.jar de.unima.ki.anyburl.Apply {config}')
                t1 = time.time()
                with open(f"{path}predictions_{kg}/runtime.txt", "w") as time_file:
                    time_file.write(str(t1-t0))
    else:
        assert system in ['anyburl', 'AnyBURL'], 'wrong system name'
        path = f"data/AnyBURL/"
        print(f"\n### Applying AnyBURL rules generated on original KG(s) ###\n")
        for kg in kgs:
            t0 = time.time()
            print("Dataset: ", kg.upper())
            config = f"{path}config-apply-{kg}.properties"
            os.system(f'java -Xmx12G -cp systems/AnyBURL-RE.jar de.unima.ki.anyburl.Apply {config}')
            t1 = time.time()
            with open(f"{path}predictions_{kg}/runtime.txt", "w") as time_file:
                time_file.write(str(t1-t0))
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--kgs', type=str, nargs='+', default=['wn18rr'], choices=['wn18rr', 'fb15k', 'carcinogenesis', 'mutagenesis', 'openbiolink', 'yago3', 'drkg'],\
                        help="Knowledge graph names")
    parser.add_argument('--models', type = str, nargs='+', default=None, choices=['TransE', 'Distmult', 'Rotate', 'transe', 'distmult', 'rotate'], help="Embedding model(s)")
    parser.add_argument('--system', type=str, default='amie', choices=['amie', 'AMIE', 'anyburl', 'AnyBURL'], help="System to execute")
    
    args = parser.parse_args()
    
    execute(args.kgs, args.models, args.system)
    